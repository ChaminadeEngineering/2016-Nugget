// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::driveTrainrightTopMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainrightFrontMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainrightRearMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainleftRearMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainleftTopMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainleftFrontMotor;
std::shared_ptr<DoubleSolenoid> RobotMap::driveTrainshiftSolenoid;
std::shared_ptr<Compressor> RobotMap::pneumaticsCompressor;
std::shared_ptr<AnalogInput> RobotMap::pneumaticspressureSensor;
std::shared_ptr<CANTalon> RobotMap::pivotpivotMotor;
std::shared_ptr<DigitalInput> RobotMap::pivotPivotLowerLimit;
std::shared_ptr<Encoder> RobotMap::pivotPivotEncoder;
std::shared_ptr<DigitalInput> RobotMap::pivotPivotUpperLimit;
std::shared_ptr<CANTalon> RobotMap::shooterrightFlywheelMotor;
std::shared_ptr<CANTalon> RobotMap::shooterleftFlywheelMotor;
std::shared_ptr<Solenoid> RobotMap::shooterkickerSolenoid;
std::shared_ptr<CANTalon> RobotMap::collectorrightCollectorMotor;
std::shared_ptr<CANTalon> RobotMap::collectorleftCollectorMotor;
std::shared_ptr<CANTalon> RobotMap::collectorrollerMotor;
std::shared_ptr<DigitalInput> RobotMap::collectorcollectorArmUpSwitch;
std::shared_ptr<DigitalInput> RobotMap::collectorcollectorArmDownSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveTrainrightTopMotor.reset(new CANTalon(1));
    lw->AddActuator("DriveTrain", "rightTopMotor", driveTrainrightTopMotor);
    
    driveTrainrightFrontMotor.reset(new CANTalon(2));
    lw->AddActuator("DriveTrain", "rightFrontMotor", driveTrainrightFrontMotor);
    
    driveTrainrightRearMotor.reset(new CANTalon(3));
    lw->AddActuator("DriveTrain", "rightRearMotor", driveTrainrightRearMotor);
    
    driveTrainleftRearMotor.reset(new CANTalon(4));
    lw->AddActuator("DriveTrain", "leftRearMotor", driveTrainleftRearMotor);
    
    driveTrainleftTopMotor.reset(new CANTalon(5));
    lw->AddActuator("DriveTrain", "leftTopMotor", driveTrainleftTopMotor);
    
    driveTrainleftFrontMotor.reset(new CANTalon(6));
    lw->AddActuator("DriveTrain", "leftFrontMotor", driveTrainleftFrontMotor);
    
driveTrainshiftSolenoid.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("DriveTrain", "shiftSolenoid", driveTrainshiftSolenoid);
    
    pneumaticsCompressor.reset(new Compressor(0));
    
    
    pneumaticspressureSensor.reset(new AnalogInput(0));
    lw->AddSensor("Pneumatics", "pressureSensor", pneumaticspressureSensor);
    
    pivotpivotMotor.reset(new CANTalon(7));
    lw->AddActuator("Pivot", "pivotMotor", pivotpivotMotor);
    
    pivotPivotLowerLimit.reset(new DigitalInput(2));
    lw->AddSensor("Pivot", "PivotLowerLimit", pivotPivotLowerLimit);
    
    pivotPivotEncoder.reset(new Encoder(3, 4, false, Encoder::k4X));
    lw->AddSensor("Pivot", "PivotEncoder", pivotPivotEncoder);
    pivotPivotEncoder->SetDistancePerPulse(1.0);
    pivotPivotEncoder->SetPIDSourceType(PIDSourceType::kRate);
    pivotPivotUpperLimit.reset(new DigitalInput(5));
    lw->AddSensor("Pivot", "PivotUpperLimit", pivotPivotUpperLimit);
    
    shooterrightFlywheelMotor.reset(new CANTalon(8));
    lw->AddActuator("Shooter", "rightFlywheelMotor", shooterrightFlywheelMotor);
    
    shooterleftFlywheelMotor.reset(new CANTalon(9));
    lw->AddActuator("Shooter", "leftFlywheelMotor", shooterleftFlywheelMotor);
    
    shooterkickerSolenoid.reset(new Solenoid(2, 3));
    lw->AddActuator("Shooter", "kickerSolenoid", shooterkickerSolenoid);
    
    collectorrightCollectorMotor.reset(new CANTalon(10));
    lw->AddActuator("Collector", "rightCollectorMotor", collectorrightCollectorMotor);
    
    collectorleftCollectorMotor.reset(new CANTalon(11));
    lw->AddActuator("Collector", "leftCollectorMotor", collectorleftCollectorMotor);
    
    collectorrollerMotor.reset(new CANTalon(12));
    lw->AddActuator("Collector", "rollerMotor", collectorrollerMotor);
    
    collectorcollectorArmUpSwitch.reset(new DigitalInput(0));
    lw->AddSensor("Collector", "collectorArmUpSwitch", collectorcollectorArmUpSwitch);
    
    collectorcollectorArmDownSwitch.reset(new DigitalInput(1));
    lw->AddSensor("Collector", "collectorArmDownSwitch", collectorcollectorArmDownSwitch);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
