// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain"){
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightTopMotor = RobotMap::driveTrainrightTopMotor;
    rightFrontMotor = RobotMap::driveTrainrightFrontMotor;
    rightRearMotor = RobotMap::driveTrainrightRearMotor;
    leftRearMotor = RobotMap::driveTrainleftRearMotor;
    leftTopMotor = RobotMap::driveTrainleftTopMotor;
    leftFrontMotor = RobotMap::driveTrainleftFrontMotor;
    shiftSolenoid = RobotMap::driveTrainshiftSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveTrain::InitDefaultCommand()
{
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::RunDriveTrainMotors(float rightSpeed, float leftSpeed, float baseDirection)
{
	if (baseDirection == FORWARD)
	{
		rightTopMotor->Set(rightSpeed * rightFrontDirection);
		rightFrontMotor->Set(rightSpeed * rightRearDirection);
		rightFrontMotor->Set(rightSpeed * rightTopDirection);
		leftFrontMotor->Set(leftSpeed * leftFrontDirection);
		leftFrontMotor->Set(leftSpeed * leftRearDirection);
		leftFrontMotor->Set(leftSpeed * leftTopDirection);
	 }
	if (baseDirection == REVERSE)
	{
		rightFrontMotor->Set(rightSpeed * rightFrontDirection);
		rightFrontMotor->Set(-rightSpeed * rightRearDirection);
		rightFrontMotor->Set(-rightSpeed * rightTopDirection);
		leftFrontMotor->Set(-leftSpeed * leftFrontDirection);
		leftFrontMotor->Set(-leftSpeed * leftRearDirection);
		leftFrontMotor->Set(-leftSpeed * leftTopDirection);
	}
}

void DriveTrain::StopBase()
{
	rightTopMotor->Set(0);
	rightTopMotor->Set(0);
	rightFrontMotor->Set(0);
	rightFrontMotor->Set(0);
	leftFrontMotor->Set(0);
	leftFrontMotor->Set(0);
	leftFrontMotor->Set(0);
}

void DriveTrain::DriveForward(float speed)
{
	rightTopMotor->Set(speed * rightTopDirection);
	rightFrontMotor->Set(speed * rightFrontDirection);
	rightRearMotor->Set(speed * rightRearDirection);
	leftTopMotor->Set(speed * leftTopDirection);
	leftFrontMotor->Set(speed * leftFrontDirection);
	leftRearMotor->Set(speed * leftRearDirection);
}

void DriveTrain::DriveBackward(float speed)
{
	rightTopMotor->Set(-speed * rightTopDirection);
	rightFrontMotor->Set(-speed * rightFrontDirection);
	rightRearMotor->Set(-speed * rightRearDirection);
	leftTopMotor->Set(-speed * leftTopDirection);
	leftFrontMotor->Set(-speed * leftFrontDirection);
	leftRearMotor->Set(-speed * leftRearDirection);
}

void DriveTrain::DownShift()
{
	shiftSolenoid->Set(DoubleSolenoid::kForward);
}

void DriveTrain::UpShift()
{
	shiftSolenoid->Set(DoubleSolenoid::kReverse);
}

/*If the shifter solenoid is off or in high gear - switch to low gear (forward)
 * If it is in low gear - switch to high gear (reverse)
 */
void DriveTrain::ToggleShift()
{
	if (shiftSolenoid->Get() == DoubleSolenoid::kForward)
	{
		shiftSolenoid->Set(DoubleSolenoid::kReverse);
	}
	else
	{
		shiftSolenoid->Set(DoubleSolenoid::kForward);
	}
}
